/// <reference types="node" />
import PluginBase from '@electron-forge/plugin-base';
import { ForgeConfig } from '@electron-forge/shared-types';
import Logger from '@electron-forge/web-multi-logger';
import { ChildProcess } from 'child_process';
import webpack from 'webpack';
import { WebpackPluginConfig, WebpackPluginEntryPoint, WebpackPreloadEntryPoint } from './Config';
export default class WebpackPlugin extends PluginBase<WebpackPluginConfig> {
    name: string;
    private isProd;
    private projectDir;
    private baseDir;
    private watchers;
    private servers;
    private loggers;
    private port;
    private loggerPort;
    constructor(c: WebpackPluginConfig);
    private isValidPort;
    private resolveConfig;
    private exitHandler;
    private runWebpack;
    init: (dir: string) => void;
    private loggedOutputUrl;
    getHook(name: string): ((_: any, child: ChildProcess) => Promise<void>) | ((forgeConfig: ForgeConfig) => Promise<ForgeConfig>) | ((_: any, buildPath: string) => Promise<void>) | null;
    resolveForgeConfig: (forgeConfig: ForgeConfig) => Promise<ForgeConfig>;
    packageAfterCopy: (_: any, buildPath: string) => Promise<void>;
    rendererEntryPoint: (entryPoint: WebpackPluginEntryPoint, inRendererDir: boolean, basename: string) => string;
    toEnvironmentVariable: (entryPoint: WebpackPluginEntryPoint, preload?: boolean) => string;
    getPreloadDefine: (entryPoint: WebpackPluginEntryPoint) => string;
    getDefines: (inRendererDir?: boolean) => {
        [key: string]: string;
    };
    getMainConfig: () => Promise<webpack.Configuration>;
    getPreloadRendererConfig: (parentPoint: WebpackPluginEntryPoint, entryPoint: WebpackPreloadEntryPoint) => Promise<webpack.Configuration>;
    getRendererConfig: (entryPoints: WebpackPluginEntryPoint[]) => Promise<webpack.Configuration>;
    compileMain: (watch?: boolean, logger?: Logger | undefined) => Promise<void>;
    compileRenderers: (watch?: boolean) => Promise<void>;
    launchDevServers: (logger: Logger) => Promise<void>;
    private alreadyStarted;
    startLogic(): Promise<false>;
}
