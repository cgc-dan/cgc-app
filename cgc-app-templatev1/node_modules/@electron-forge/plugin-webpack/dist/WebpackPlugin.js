"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _pluginBase = _interopRequireDefault(require("@electron-forge/plugin-base"));

var _webMultiLogger = _interopRequireDefault(require("@electron-forge/web-multi-logger"));

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _express = _interopRequireDefault(require("express"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _once = _interopRequireDefault(require("./util/once"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const d = (0, _debug.default)('electron-forge:plugin:webpack');
const DEFAULT_PORT = 3000;
const DEFAULT_LOGGER_PORT = 9000;

class WebpackPlugin extends _pluginBase.default {
  constructor(c) {
    super(c);

    _defineProperty(this, "name", 'webpack');

    _defineProperty(this, "isProd", false);

    _defineProperty(this, "projectDir", void 0);

    _defineProperty(this, "baseDir", void 0);

    _defineProperty(this, "watchers", []);

    _defineProperty(this, "servers", []);

    _defineProperty(this, "loggers", []);

    _defineProperty(this, "port", DEFAULT_PORT);

    _defineProperty(this, "loggerPort", DEFAULT_LOGGER_PORT);

    _defineProperty(this, "isValidPort", port => {
      if (port < 1024) {
        throw new Error(`Cannot specify port (${port}) below 1024, as they are privileged`);
      } else if (port > 65535) {
        throw new Error(`Port specified (${port}) is not a valid TCP port.`);
      } else {
        return true;
      }
    });

    _defineProperty(this, "resolveConfig", config => {
      // eslint-disable-next-line import/no-dynamic-require, global-require
      if (typeof config === 'string') return require(_path.default.resolve(_path.default.dirname(this.baseDir), config));
      return config;
    });

    _defineProperty(this, "exitHandler", (options, err) => {
      d('handling process exit with:', options);

      if (options.cleanup) {
        for (const watcher of this.watchers) {
          d('cleaning webpack watcher');
          watcher.close(() => {});
        }

        this.watchers = [];

        for (const server of this.servers) {
          d('cleaning http server');
          server.close();
        }

        this.servers = [];

        for (const logger of this.loggers) {
          d('stopping logger');
          logger.stop();
        }

        this.loggers = [];
      }

      if (err) console.error(err.stack);
      if (options.exit) process.exit();
    });

    _defineProperty(this, "runWebpack", async options => new Promise((resolve, reject) => {
      (0, _webpack.default)(options).run((err, stats) => {
        if (err) {
          return reject(err);
        }

        return resolve(stats);
      });
    }));

    _defineProperty(this, "init", dir => {
      this.projectDir = dir;
      this.baseDir = _path.default.resolve(dir, '.webpack');
      d('hooking process events');
      process.on('exit', _code => this.exitHandler({
        cleanup: true
      }));
      process.on('SIGINT', _signal => this.exitHandler({
        exit: true
      }));
    });

    _defineProperty(this, "loggedOutputUrl", false);

    _defineProperty(this, "resolveForgeConfig", async forgeConfig => {
      if (!forgeConfig.packagerConfig) {
        forgeConfig.packagerConfig = {};
      }

      if (forgeConfig.packagerConfig.ignore) {
        console.error(`You have set packagerConfig.ignore, the Electron Forge webpack plugin normally sets this automatically.

Your packaged app may be larger than expected if you dont ignore everything other than the '.webpack' folder`.red);
        return forgeConfig;
      }

      forgeConfig.packagerConfig.ignore = file => {
        if (!file) return false;
        return !/^[/\\]\.webpack($|[/\\]).*$/.test(file);
      };

      return forgeConfig;
    });

    _defineProperty(this, "packageAfterCopy", async (_, buildPath) => {
      const pj = await _fsExtra.default.readJson(_path.default.resolve(this.projectDir, 'package.json'));
      delete pj.config.forge;
      pj.devDependencies = {};
      pj.dependencies = {};
      pj.optionalDependencies = {};
      pj.peerDependencies = {};
      await _fsExtra.default.writeJson(_path.default.resolve(buildPath, 'package.json'), pj, {
        spaces: 2
      });
      await _fsExtra.default.mkdirp(_path.default.resolve(buildPath, 'node_modules'));
    });

    _defineProperty(this, "rendererEntryPoint", (entryPoint, inRendererDir, basename) => {
      if (this.isProd) {
        return `\`file://$\{require('path').resolve(__dirname, '..', '${inRendererDir ? 'renderer' : '.'}', '${entryPoint.name}', '${basename}')}\``;
      }

      const baseUrl = `http://localhost:${this.port}/${entryPoint.name}`;

      if (basename !== 'index.html') {
        return `'${baseUrl}/${basename}'`;
      }

      return `'${baseUrl}'`;
    });

    _defineProperty(this, "toEnvironmentVariable", (entryPoint, preload = false) => {
      const suffix = preload ? '_PRELOAD_WEBPACK_ENTRY' : '_WEBPACK_ENTRY';
      return `${entryPoint.name.toUpperCase().replace(/ /g, '_')}${suffix}`;
    });

    _defineProperty(this, "getPreloadDefine", entryPoint => {
      if (entryPoint.preload) {
        if (this.isProd) {
          return `require('path').resolve(__dirname, '../renderer', '${entryPoint.name}', 'preload.js')`;
        }

        return `'${_path.default.resolve(this.baseDir, 'renderer', entryPoint.name, 'preload.js').replace(/\\/g, '\\\\')}'`;
      } // If this entry-point has no configured preload script just map this constant to `undefined`
      // so that any code using it still works.  This makes quick-start / docs simpler.


      return 'undefined';
    });

    _defineProperty(this, "getDefines", (inRendererDir = true) => {
      const defines = {
        ASSET_RELOCATOR_BASE_DIR: this.isProd ? `process.resourcesPath + "/" + (__filename.indexOf(".asar") === -1 ? "app" : "app.asar") + "/.webpack/${inRendererDir ? 'main' : 'renderer/any_folder'}"` : JSON.stringify(_path.default.resolve(this.baseDir, inRendererDir ? 'main' : 'renderer', inRendererDir ? '.' : 'any_folder'))
      };

      if (!this.config.renderer.entryPoints || !Array.isArray(this.config.renderer.entryPoints)) {
        throw new Error('Required config option "renderer.entryPoints" has not been defined');
      }

      for (const entryPoint of this.config.renderer.entryPoints) {
        const entryKey = this.toEnvironmentVariable(entryPoint);

        if (entryPoint.html) {
          defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.html');
        } else {
          defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.js');
        }

        defines[`process.env.${entryKey}`] = defines[entryKey];
        const preloadDefineKey = this.toEnvironmentVariable(entryPoint, true);
        defines[preloadDefineKey] = this.getPreloadDefine(entryPoint);
        defines[`process.env.${preloadDefineKey}`] = defines[preloadDefineKey];
      }

      return defines;
    });

    _defineProperty(this, "getMainConfig", async () => {
      const mainConfig = this.resolveConfig(this.config.mainConfig);

      if (!mainConfig.entry) {
        throw new Error('Required config option "entry" has not been defined');
      }

      const fix = item => {
        if (typeof item === 'string') return fix([item])[0];

        if (Array.isArray(item)) {
          return item.map(val => {
            if (val.indexOf('./') === 0) return _path.default.resolve(this.projectDir, val);
            return val;
          });
        }

        const ret = {};

        for (const key of Object.keys(item)) {
          ret[key] = fix(item[key]);
        }

        return ret;
      };

      mainConfig.entry = fix(mainConfig.entry);
      const defines = this.getDefines();
      return _webpackMerge.default.smart({
        devtool: 'source-map',
        target: 'electron-main',
        mode: this.isProd ? 'production' : 'development',
        output: {
          path: _path.default.resolve(this.baseDir, 'main'),
          filename: 'index.js',
          libraryTarget: 'commonjs2'
        },
        plugins: [new _webpack.default.DefinePlugin(defines)],
        node: {
          __dirname: false,
          __filename: false
        },
        resolve: {
          modules: [_path.default.resolve(_path.default.dirname(this.baseDir), './'), _path.default.resolve(_path.default.dirname(this.baseDir), 'node_modules'), _path.default.resolve(__dirname, '..', 'node_modules')]
        }
      }, mainConfig || {});
    });

    _defineProperty(this, "getPreloadRendererConfig", async (parentPoint, entryPoint) => {
      const rendererConfig = this.resolveConfig(this.config.renderer.config);
      const prefixedEntries = entryPoint.prefixedEntries || [];
      return _webpackMerge.default.smart({
        devtool: 'inline-source-map',
        target: 'electron-renderer',
        mode: this.isProd ? 'production' : 'development',
        entry: prefixedEntries.concat([entryPoint.js]),
        output: {
          path: _path.default.resolve(this.baseDir, 'renderer', parentPoint.name),
          filename: 'preload.js'
        },
        node: {
          __dirname: false,
          __filename: false
        }
      }, rendererConfig);
    });

    _defineProperty(this, "getRendererConfig", async entryPoints => {
      const rendererConfig = this.resolveConfig(this.config.renderer.config);
      const entry = {};

      for (const entryPoint of entryPoints) {
        const prefixedEntries = entryPoint.prefixedEntries || [];
        entry[entryPoint.name] = prefixedEntries.concat([entryPoint.js]).concat(this.isProd || !entryPoint.html ? [] : ['webpack-hot-middleware/client']);
      }

      const defines = this.getDefines(false);
      return _webpackMerge.default.smart({
        entry,
        devtool: 'inline-source-map',
        target: 'electron-renderer',
        mode: this.isProd ? 'production' : 'development',
        output: _objectSpread({
          path: _path.default.resolve(this.baseDir, 'renderer'),
          filename: '[name]/index.js',
          globalObject: 'self'
        }, this.isProd ? {} : {
          publicPath: '/'
        }),
        node: {
          __dirname: false,
          __filename: false
        },
        plugins: entryPoints.filter(entryPoint => Boolean(entryPoint.html)).map(entryPoint => new _htmlWebpackPlugin.default({
          title: entryPoint.name,
          template: entryPoint.html,
          filename: `${entryPoint.name}/index.html`,
          chunks: [entryPoint.name].concat(entryPoint.additionalChunks || [])
        })).concat([new _webpack.default.DefinePlugin(defines)]).concat(this.isProd ? [] : [new _webpack.default.HotModuleReplacementPlugin()])
      }, rendererConfig);
    });

    _defineProperty(this, "compileMain", async (watch = false, logger) => {
      let tab;

      if (logger) {
        tab = logger.createTab('Main Process');
      }

      await (0, _asyncOra.asyncOra)('Compiling Main Process Code', async () => {
        const config = await this.getMainConfig();
        await new Promise((resolve, reject) => {
          const compiler = (0, _webpack.default)(config);
          const [onceResolve, onceReject] = (0, _once.default)(resolve, reject);

          const cb = (err, stats) => {
            if (tab && stats) {
              tab.log(stats.toString({
                colors: true
              }));
            }

            if (err) return onceReject(err);

            if (!watch && stats.hasErrors()) {
              return onceReject(new Error(`Compilation errors in the main process: ${stats.toString()}`));
            }

            return onceResolve();
          };

          if (watch) {
            this.watchers.push(compiler.watch({}, cb));
          } else {
            compiler.run(cb);
          }
        });
      });
    });

    _defineProperty(this, "compileRenderers", async (watch = false) => {
      // eslint-disable-line @typescript-eslint/no-unused-vars, max-len
      await (0, _asyncOra.asyncOra)('Compiling Renderer Template', async () => {
        const stats = await this.runWebpack((await this.getRendererConfig(this.config.renderer.entryPoints)));

        if (!watch && stats.hasErrors()) {
          throw new Error(`Compilation errors in the renderer: ${stats.toString()}`);
        }
      });

      for (const entryPoint of this.config.renderer.entryPoints) {
        if (entryPoint.preload) {
          await (0, _asyncOra.asyncOra)(`Compiling Renderer Preload: ${entryPoint.name}`, async () => {
            await this.runWebpack((await this.getPreloadRendererConfig(entryPoint, entryPoint.preload)));
          });
        }
      }
    });

    _defineProperty(this, "launchDevServers", async logger => {
      await (0, _asyncOra.asyncOra)('Launch Dev Servers', async () => {
        const tab = logger.createTab('Renderers');
        const config = await this.getRendererConfig(this.config.renderer.entryPoints);
        const compiler = (0, _webpack.default)(config);
        const server = (0, _webpackDevMiddleware.default)(compiler, {
          logger: {
            debug: tab.log.bind(tab),
            log: tab.log.bind(tab),
            info: tab.log.bind(tab),
            error: tab.log.bind(tab),
            warn: tab.log.bind(tab)
          },
          publicPath: '/',
          hot: true,
          historyApiFallback: true,
          writeToDisk: true
        });
        const app = (0, _express.default)();
        app.use(server);
        app.use((0, _webpackHotMiddleware.default)(compiler));
        this.servers.push(app.listen(this.port));
      });
      await (0, _asyncOra.asyncOra)('Compiling Preload Scripts', async () => {
        for (const entryPoint of this.config.renderer.entryPoints) {
          if (entryPoint.preload) {
            const config = await this.getPreloadRendererConfig(entryPoint, entryPoint.preload);
            await new Promise((resolve, reject) => {
              const tab = logger.createTab(`${entryPoint.name} - Preload`);
              const [onceResolve, onceReject] = (0, _once.default)(resolve, reject);
              this.watchers.push((0, _webpack.default)(config).watch({}, (err, stats) => {
                if (stats) {
                  tab.log(stats.toString({
                    colors: true
                  }));
                }

                if (err) return onceReject(err);
                return onceResolve();
              }));
            });
          }
        }
      });
    });

    _defineProperty(this, "alreadyStarted", false);

    if (c.port) {
      if (this.isValidPort(c.port)) {
        this.port = c.port;
      }
    }

    if (c.loggerPort) {
      if (this.isValidPort(c.loggerPort)) {
        this.loggerPort = c.loggerPort;
      }
    }

    this.startLogic = this.startLogic.bind(this);
    this.getHook = this.getHook.bind(this);
  }

  getHook(name) {
    switch (name) {
      case 'prePackage':
        this.isProd = true;
        return async () => {
          await _fsExtra.default.remove(this.baseDir);
          await this.compileMain();
          await this.compileRenderers();
        };

      case 'postStart':
        return async (_, child) => {
          if (!this.loggedOutputUrl) {
            console.info(`\n\nWebpack Output Available: ${`http://localhost:${this.loggerPort}`.cyan}\n`);
            this.loggedOutputUrl = true;
          }

          d('hooking electron process exit');
          child.on('exit', () => {
            if (child.restarted) return;
            this.exitHandler({
              cleanup: true,
              exit: true
            });
          });
        };

      case 'resolveForgeConfig':
        return this.resolveForgeConfig;

      case 'packageAfterCopy':
        return this.packageAfterCopy;

      default:
        return null;
    }
  }

  async startLogic() {
    if (this.alreadyStarted) return false;
    this.alreadyStarted = true;
    await _fsExtra.default.remove(this.baseDir);
    const logger = new _webMultiLogger.default(this.loggerPort);
    this.loggers.push(logger);
    await this.compileMain(true, logger);
    await this.launchDevServers(logger);
    await logger.start();
    return false;
  }

}

exports.default = WebpackPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,